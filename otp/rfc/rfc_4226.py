import hashlib
import hmac

from .common import AllowedAlgorithms


# HOTP (RFC 4226) - https://datatracker.ietf.org/doc/html/rfc4226
def rfc_4226(C: bytes, K: bytes, Digit: int = 6, HMAC_ALGORITHM: AllowedAlgorithms = AllowedAlgorithms.HMAC_SHA_1) -> int:
    """
    Implementation of the HOTP algorithm, following RFC 4226
    (with the HMAC_ALGORITHM parameter being the only deviation from
    the spec to allow for use from the TOTP spec function).

    The HOTP algorithm is based on an increasing counter value and a
    static symmetric key known only to the token and the validation
    service.  In order to create the HOTP value, we will use the HMAC-
    SHA-1 algorithm, as defined in RFC 2104 [BCK2].

    As the output of the HMAC-SHA-1 calculation is 160 bits, we must
    truncate this value to something that can be easily entered by a
    user.

                    HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))

    Where:

      - Truncate represents the function that converts an HMAC-SHA-1
        value into an HOTP value as defined in Section 5.3.

    The Key (K), the Counter (C), and Data values are hashed high-order
    byte first.

    The HOTP values generated by the HOTP generator are treated as big
    endian.

    :param C:  8-byte counter value, the moving factor.
        This counter MUST be synchronized between the HOTP generator (client)
         and the HOTP validator (server).
    :param K: shared secret between client and server; each HOTP
        generator has a different and unique secret K.
    :param Digit: number of digits in an HOTP value; system parameter.
    :param HMAC_ALGORITHM: HOTP hash function; HMAC_SHA_1 by default, spec-compliant.
    :return D: D is a number in the range 0...10^{Digit}-1
    """

    # Validation
    if len(C) != 8:
        raise ValueError('C must be 8 bytes long')
    if Digit < 6:
        raise ValueError('Digit must be >= 6')
    if HMAC_ALGORITHM not in AllowedAlgorithms:
        raise ValueError('HMAC must be one of: ' + ", ".join(AllowedAlgorithms))

    # Step 1: Generate an HMAC-SHA-1 value Let HS = HMAC-SHA-1(K,C)
    HS = hmac.new(K, C, getattr(hashlib, HMAC_ALGORITHM)).digest()
